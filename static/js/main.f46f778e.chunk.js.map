{"version":3,"sources":["components/Categories.js","components/Layout.js","components/ToolsUtf8.js","components/ToolsBase64.js","App.js","serviceWorker.js","index.js"],"names":["categories","name","text","CategoriesBlock","styled","div","Category","NavLink","Categories","map","c","key","activeClassName","exact","to","Layout","props","children","StyledTextarea","textarea","ToolsUtf8","useState","utf8EncSrc","setUtf8EncSrc","utf8EncRst","setUtf8EncRst","utf8DecSrc","setUtf8DecSrc","utf8DecRst","setUtf8DecRst","style","paddingLeft","paddingRight","placeholder","value","onChange","e","target","encodeURIComponent","readOnly","decodeURIComponent","onClick","ToolsBase64","base64EncSrc","setBase64EncSrc","base64EncRst","setBase64EncRst","base64DecSrc","setBase64DecSrc","base64DecRst","setBase64DecRst","str","result","btoa","replace","match","p1","String","fromCharCode","atob","split","charCodeAt","toString","slice","join","App","path","render","component","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f46f778e.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst categories = [\r\n  {\r\n    name: 'all',\r\n    text: '전체보기',\r\n  },\r\n  {\r\n    name: 'utf8',\r\n    text: 'utf-8 enc/dec',\r\n  },\r\n  {\r\n    name: 'base64',\r\n    text: 'base64 enc/dec',\r\n  },\r\n];\r\n\r\nconst CategoriesBlock = styled.div`\r\n  display: flex;\r\n  padding: 1rem;\r\n  width: 768px;\r\n  margin: 0 auto;\r\n  @media screen and (max-width: 768px) {\r\n    width: 100%;\r\n    overflow-x: auto;\r\n  }\r\n`;\r\n\r\nconst Category = styled(NavLink)`\r\n  font-size: 1.125rem;\r\n  cursor: pointer;\r\n  white-space: pre;\r\n  text-decoration: none;\r\n  color: inherit;\r\n  padding-bottom: 0.25rem;\r\n\r\n  &:hover {\r\n    color: #495057;\r\n  }\r\n\r\n  &.active {\r\n    font-weight: 600;\r\n    border-bottom: 2px solid #22b8cf;\r\n    color: #22b8cf;\r\n    &:hover {\r\n      color: #3bc9db;\r\n    }\r\n  }\r\n\r\n  & + & {\r\n    margin-left: 1rem;\r\n  }\r\n`;\r\nconst Categories = () => {\r\n  return (\r\n    <CategoriesBlock>\r\n      {categories.map((c) => (\r\n        <Category\r\n          key={c.name}\r\n          activeClassName=\"active\"\r\n          exact={c.name === 'all'}\r\n          to={c.name === 'all' ? `/` : `/${c.name}`}\r\n        >\r\n          {c.text}\r\n        </Category>\r\n      ))}\r\n    </CategoriesBlock>\r\n  );\r\n};\r\n\r\nexport default Categories;\r\n","import Categories from './Categories';\r\nimport React from 'react';\r\n\r\nexport default function Layout(props) {\r\n  return (\r\n    <div>\r\n      <Categories />\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledTextarea = styled.textarea`\r\n  -webkit-box-sizing: border-box;\r\n  -moz-box-sizing: border-box;\r\n  box-sizing: border-box;\r\n  width: 100%;\r\n`;\r\n\r\nfunction ToolsUtf8() {\r\n  const [utf8EncSrc, setUtf8EncSrc] = useState('');\r\n  const [utf8EncRst, setUtf8EncRst] = useState('');\r\n  const [utf8DecSrc, setUtf8DecSrc] = useState('');\r\n  const [utf8DecRst, setUtf8DecRst] = useState('');\r\n  function utf8encode(e) {\r\n    setUtf8EncSrc(e.target.value);\r\n    setUtf8EncRst(encodeURIComponent(e.target.value));\r\n  }\r\n  function utf8decode(e) {\r\n    setUtf8DecSrc(e.target.value);\r\n    setUtf8DecRst(decodeURIComponent(e.target.value));\r\n  }\r\n  function clear() {\r\n    setUtf8EncSrc('');\r\n    setUtf8EncRst('');\r\n    setUtf8DecSrc('');\r\n    setUtf8DecRst('');\r\n  }\r\n  const style = {\r\n    paddingLeft: '10px',\r\n    paddingRight: '10px',\r\n  };\r\n\r\n  return (\r\n    <div style={style}>\r\n      <h2>UTF-8 ENCODE</h2>\r\n      <StyledTextarea\r\n        placeholder=\"input here\"\r\n        value={utf8EncSrc}\r\n        onChange={utf8encode}\r\n      ></StyledTextarea>\r\n      <h2>UTF-8 ENCODE OUTPUT</h2>\r\n      <StyledTextarea\r\n        placeholder=\"output here\"\r\n        value={utf8EncRst}\r\n        readOnly\r\n      ></StyledTextarea>\r\n      <h2>UTF-8 DECODE</h2>\r\n      <StyledTextarea\r\n        placeholder=\"input here\"\r\n        value={utf8DecSrc}\r\n        onChange={utf8decode}\r\n      ></StyledTextarea>\r\n      <h2>UTF-8 DECODE OUTOUT</h2>\r\n      <StyledTextarea\r\n        placeholder=\"output here\"\r\n        value={utf8DecRst}\r\n        readOnly\r\n      ></StyledTextarea>\r\n      <div>\r\n        <button onClick={clear}>Clear!</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default ToolsUtf8;\r\n","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledTextarea = styled.textarea`\r\n  -webkit-box-sizing: border-box;\r\n  -moz-box-sizing: border-box;\r\n  box-sizing: border-box;\r\n  width: 100%;\r\n`;\r\n\r\nfunction ToolsBase64() {\r\n  const [base64EncSrc, setBase64EncSrc] = useState('');\r\n  const [base64EncRst, setBase64EncRst] = useState('');\r\n  const [base64DecSrc, setBase64DecSrc] = useState('');\r\n  const [base64DecRst, setBase64DecRst] = useState('');\r\n  function base64Encode(e) {\r\n    setBase64EncSrc(e.target.value);\r\n    const str = e.target.value;\r\n    const result = btoa(\r\n      encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, function toSolidBytes(\r\n        match,\r\n        p1\r\n      ) {\r\n        return String.fromCharCode('0x' + p1);\r\n      })\r\n    );\r\n    setBase64EncRst(result);\r\n  }\r\n  function base64Decode(e) {\r\n    setBase64DecSrc(e.target.value);\r\n    const str = e.target.value;\r\n    const result = decodeURIComponent(\r\n      atob(str)\r\n        .split('')\r\n        .map(function (c) {\r\n          return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\r\n        })\r\n        .join('')\r\n    );\r\n    setBase64DecRst(result);\r\n  }\r\n  function clear() {\r\n    setBase64EncSrc('');\r\n    setBase64EncRst('');\r\n    setBase64DecSrc('');\r\n    setBase64DecRst('');\r\n  }\r\n  const style = {\r\n    paddingLeft: '10px',\r\n    paddingRight: '10px',\r\n  };\r\n\r\n  return (\r\n    <div style={style}>\r\n      <h2>base64 ENCODE</h2>\r\n      <StyledTextarea\r\n        placeholder=\"input here\"\r\n        value={base64EncSrc}\r\n        onChange={base64Encode}\r\n      ></StyledTextarea>\r\n      <h2>base64 ENCODE OUTPUT</h2>\r\n      <StyledTextarea\r\n        placeholder=\"output here\"\r\n        value={base64EncRst}\r\n        readOnly\r\n      ></StyledTextarea>\r\n      <h2>base64 DECODE</h2>\r\n      <StyledTextarea\r\n        placeholder=\"input here\"\r\n        value={base64DecSrc}\r\n        onChange={base64Decode}\r\n      ></StyledTextarea>\r\n      <h2>base64 DECODE OUTOUT</h2>\r\n      <StyledTextarea\r\n        placeholder=\"output here\"\r\n        value={base64DecRst}\r\n        readOnly\r\n      ></StyledTextarea>\r\n      <div>\r\n        <button onClick={clear}>Clear!</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default ToolsBase64;\r\n","import React from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport Layout from './components/Layout';\r\nimport ToolsUtf8 from './components/ToolsUtf8';\r\nimport ToolsBase64 from './components/ToolsBase64';\r\n\r\nfunction App() {\r\n  return (\r\n    <Layout>\r\n      <Switch>\r\n        <Route path={`/`} exact render={() => <h1>MAIN PAGE</h1>} />\r\n        <Route path={`/utf8`} component={ToolsUtf8} />\r\n        <Route path={`/base64`} component={ToolsBase64} />\r\n        <Route path={`*`} render={() => <h2>404 Page Not Found</h2>} />\r\n      </Switch>\r\n    </Layout>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { HashRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <HashRouter>\r\n    <App />\r\n  </HashRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}